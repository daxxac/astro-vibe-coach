import { useState, useEffect } from "react";
import { CosmicBackground } from "@/components/CosmicBackground";
import { PersonaCard } from "@/components/PersonaCard";
import { PredictionCard } from "@/components/PredictionCard";
import { CreatePersonaModal } from "@/components/CreatePersonaModal";
import { Button } from "@/components/ui/button";
import { Plus, Clock, Sparkles } from "lucide-react";
import { toast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockPersonas = [
  {
    id: "1",
    name: "–ê–Ω–Ω–∞",
    birthDate: "1995-03-15",
    birthTime: "14:30",
    birthPlace: "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
    zodiacSign: "pisces",
    gender: "female",
    familyStatus: "relationship",
    hasChildren: false,
    interests: ["–∫–∞—Ä—å–µ—Ä–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–π–æ–≥–∞"]
  },
  {
    id: "2", 
    name: "–ú–∞–∫—Å–∏–º",
    birthDate: "1988-07-22",
    birthPlace: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è",
    zodiacSign: "leo",
    gender: "male",
    familyStatus: "married",
    hasChildren: true,
    interests: ["–±–∏–∑–Ω–µ—Å", "—Å–ø–æ—Ä—Ç", "—Å–µ–º—å—è", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
  }
];

const mockPrediction = {
  general: "–°–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. –ü–ª–∞–Ω–µ—Ç—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –≤–∞–∂–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.",
  love: "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã. –í–µ–Ω–µ—Ä–∞ –≤ –≤–∞—à–µ–º —Å–µ–∫—Ç–æ—Ä–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏.",
  career: "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤. –ú–µ—Ä–∫—É—Ä–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.",
  health: "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º —Å–Ω–∞. –ú–∞—Ä—Å –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –∏–∑–ª–∏—à–Ω—é—é —ç–Ω–µ—Ä–≥–∏—é - –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ —Å–ø–æ—Ä—Ç.",
  advice: "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –õ—É–Ω–∞ –≤ –≤–∞—à–µ–º –∑–Ω–∞–∫–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞–Ω–∏–µ."
};

const Index = () => {
  const [personas, setPersonas] = useState(mockPersonas);
  const [selectedPersona, setSelectedPersona] = useState(mockPersonas[0]);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [currentPrediction, setCurrentPrediction] = useState<any>(null);
  const [isLoadingPrediction, setIsLoadingPrediction] = useState(false);

  const handleCreatePersona = (newPersona: any) => {
    if (personas.length >= 3) {
      toast({
        title: "–õ–∏–º–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
        description: "–í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        variant: "destructive"
      });
      return;
    }
    
    setPersonas([...personas, newPersona]);
    setSelectedPersona(newPersona);
    toast({
      title: "–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω! ‚ú®",
      description: `${newPersona.name} –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤`,
    });
  };

  const handleGeneratePrediction = async () => {
    if (!selectedPersona) return;
    
    setIsLoadingPrediction(true);
    
    try {
      const { data, error } = await supabase.functions.invoke('generate-prediction', {
        body: { persona: selectedPersona }
      });

      if (error) throw error;

      setCurrentPrediction(data.prediction);
      toast({
        title: "–ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤! üîÆ",
        description: "–ó–≤—ë–∑–¥—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —Ç–∞–π–Ω–∞–º–∏",
      });
    } catch (error) {
      console.error('Error generating prediction:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI",
        variant: "destructive"
      });
    } finally {
      setIsLoadingPrediction(false);
    }
  };

  const handleFeedback = (type: 'positive' | 'negative' | 'neutral') => {
    const feedbackMessages = {
      positive: "–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç—ë–º —ç—Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ‚≠ê",
      negative: "–ú—ã —É–ª—É—á—à–∏–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ üéØ", 
      neutral: "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üåü"
    };
    
    toast({
      title: "–û—Ç–∑—ã–≤ –ø–æ–ª—É—á–µ–Ω!",
      description: feedbackMessages[type],
    });
  };

  return (
    <div className="min-h-screen relative">
      <CosmicBackground />
      
      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h1 className="text-3xl font-semibold text-cosmic mb-2">
            AstroVibe
          </h1>
        </div>

        {/* –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-foreground">–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏</h2>
            <Button
              onClick={() => setIsCreateModalOpen(true)}
              className="btn-cosmic"
              disabled={personas.length >= 3}
            >
              <Plus className="w-4 h-4 mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {personas.map((persona) => (
              <PersonaCard
                key={persona.id}
                persona={persona}
                isSelected={selectedPersona?.id === persona.id}
                onClick={() => setSelectedPersona(persona)}
              />
            ))}
          </div>
          
          {personas.length === 0 && (
            <div className="text-center py-12">
              <Sparkles className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
              <p className="text-muted-foreground">
                –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∞—Å—Ç—Ä–æ-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              </p>
            </div>
          )}
        </div>

        {/* –ü—Ä–æ–≥–Ω–æ–∑ –¥–Ω—è */}
        {selectedPersona && (
          <div className="mb-8">
            <div className="flex items-center gap-2 mb-4">
              <h2 className="text-xl font-semibold text-foreground">
                –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {selectedPersona.name}
              </h2>
              <div className="flex items-center gap-1 text-sm text-muted-foreground">
                <Clock className="w-4 h-4" />
                <span>–°–µ–≥–æ–¥–Ω—è</span>
              </div>
            </div>
            
            <PredictionCard
              prediction={currentPrediction}
              isLoading={isLoadingPrediction}
              onGenerate={handleGeneratePrediction}
              onFeedback={handleFeedback}
            />
          </div>
        )}

        {/* –ù–∏–∂–Ω–∏–π —Ä–∞–∑–¥–µ–ª */}
        <div className="text-center py-8">
          <p className="text-sm text-muted-foreground">
            –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Supabase –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
          </p>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
      <CreatePersonaModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSave={handleCreatePersona}
      />
    </div>
  );
};

export default Index;
