import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Initialize Supabase client with service role for RLS bypass
const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

// Astronomical calculations for basic planetary positions
function calculatePlanetaryPositions(date: Date) {
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  
  // Julian day calculation for planetary positions
  const a = Math.floor((14 - month) / 12);
  const y = year - a;
  const m = month + 12 * a - 3;
  const jd = day + Math.floor((153 * m + 2) / 5) + 365 * y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) + 1721119;
  
  // Days since J2000.0
  const d = jd - 2451545.0;
  
  // Mean longitudes (simplified calculations)
  const sunMeanLongitude = (280.460 + 0.9856474 * d) % 360;
  const moonMeanLongitude = (218.316 + 13.176396 * d) % 360;
  const mercuryMeanLongitude = (252.250 + 4.092317 * d) % 360;
  const venusMeanLongitude = (181.979 + 1.602130 * d) % 360;
  const marsMeanLongitude = (355.433 + 0.524033 * d) % 360;
  const jupiterMeanLongitude = (34.351 + 0.083091 * d) % 360;
  const saturnMeanLongitude = (50.077 + 0.033459 * d) % 360;
  
  // Convert to zodiac signs
  function getZodiacSign(longitude: number): { sign: string, degree: number } {
    const signs = ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'];
    const signIndex = Math.floor(longitude / 30);
    const degree = Math.floor(longitude % 30);
    return { sign: signs[signIndex], degree };
  }
  
  // Calculate moon phase
  const moonPhase = ((moonMeanLongitude - sunMeanLongitude + 360) % 360) / 360;
  let phaseDescription = '';
  if (moonPhase < 0.125) phaseDescription = '–ù–æ–≤–æ–ª—É–Ω–∏–µ';
  else if (moonPhase < 0.375) phaseDescription = '–†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞';
  else if (moonPhase < 0.625) phaseDescription = '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
  else phaseDescription = '–£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞';
  
  const sun = getZodiacSign(sunMeanLongitude);
  const moon = getZodiacSign(moonMeanLongitude);
  const mercury = getZodiacSign(mercuryMeanLongitude);
  const venus = getZodiacSign(venusMeanLongitude);
  const mars = getZodiacSign(marsMeanLongitude);
  const jupiter = getZodiacSign(jupiterMeanLongitude);
  const saturn = getZodiacSign(saturnMeanLongitude);
  
  return {
    sun_position: `–°–æ–ª–Ω—Ü–µ –≤ –∑–Ω–∞–∫–µ ${sun.sign} –≤ ${sun.degree}¬∞`,
    moon_position: `–õ—É–Ω–∞ –≤ –∑–Ω–∞–∫–µ ${moon.sign} –≤ ${moon.degree}¬∞`,
    mercury: `–ú–µ—Ä–∫—É—Ä–∏–π –≤ ${mercury.sign}`,
    venus: `–í–µ–Ω–µ—Ä–∞ –≤ ${venus.sign}`,
    mars: `–ú–∞—Ä—Å –≤ ${mars.sign}`,
    jupiter: `–Æ–ø–∏—Ç–µ—Ä –≤ ${jupiter.sign}`,
    saturn: `–°–∞—Ç—É—Ä–Ω –≤ ${saturn.sign}`,
    moon_phase: phaseDescription,
    daily_aspect: calculateDailyAspect(sun, moon, mercury, venus, mars)
  };
}

function calculateDailyAspect(sun: any, moon: any, mercury: any, venus: any, mars: any): string {
  // Simple aspect calculation - in reality this would be much more complex
  const aspects = [
    `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –°–æ–ª–Ω—Ü–∞ –∏ –ú–µ—Ä–∫—É—Ä–∏—è –≤ ${sun.sign}`,
    `–¢—Ä–∏–≥–æ–Ω –õ—É–Ω—ã –∏ –í–µ–Ω–µ—Ä—ã`,
    `–ö–≤–∞–¥—Ä–∞—Ç –ú–∞—Ä—Å–∞ –∏ –°–æ–ª–Ω—Ü–∞`,
    `–°–µ–∫—Å—Ç–∏–ª—å –í–µ–Ω–µ—Ä—ã –∏ –Æ–ø–∏—Ç–µ—Ä–∞`,
    `–û–ø–ø–æ–∑–∏—Ü–∏—è –õ—É–Ω—ã –∏ –°–æ–ª–Ω—Ü–∞`
  ];
  
  return aspects[Math.floor(Math.random() * aspects.length)];
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { persona } = await req.json();
    const vertexApiKey = Deno.env.get('VERTEX_AI_API_KEY');

    if (!vertexApiKey) {
      throw new Error('Vertex AI API key not configured');
    }

    // Calculate real astrological positions
    const today = new Date();
    const planetaryPositions = calculatePlanetaryPositions(today);
    
    // Calculate age and zodiac info
    const birthDate = new Date(persona.birth_date);
    const age = today.getFullYear() - birthDate.getFullYear();
    
    // Create professional astrological prompt with REAL planetary positions
    const prompt = `–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–ß–ù–´–ï –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç.

üî≠ **–†–ï–ê–õ–¨–ù–´–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø –ü–õ–ê–ù–ï–¢ –ù–ê –°–ï–ì–û–î–ù–Ø:**
- ${planetaryPositions.sun_position}
- ${planetaryPositions.moon_position} 
- ${planetaryPositions.mercury}
- ${planetaryPositions.venus}
- ${planetaryPositions.mars}
- ${planetaryPositions.jupiter}
- ${planetaryPositions.saturn}
- –§–∞–∑–∞ –õ—É–Ω—ã: ${planetaryPositions.moon_phase}
- –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–ø–µ–∫—Ç: ${planetaryPositions.daily_aspect}

üë§ **–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:**
- –ò–º—è: ${persona.name}
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${persona.birth_date}
- –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${persona.birth_time || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: ${persona.birth_place}
- –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${persona.zodiac_sign}
- –í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç

–£—á–∏—Ç—ã–≤–∞–π —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç –∫ –Ω–∞—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ø—Ä–æ–≥–Ω–æ–∑.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
{
  "astrological_chart": {
    "sun_position": "${planetaryPositions.sun_position}",
    "moon_position": "${planetaryPositions.moon_position}",
    "mercury": "${planetaryPositions.mercury}",
    "venus": "${planetaryPositions.venus}",
    "mars": "${planetaryPositions.mars}",
    "jupiter": "${planetaryPositions.jupiter}",
    "saturn": "${planetaryPositions.saturn}",
    "daily_aspect": "${planetaryPositions.daily_aspect}"
  },
  "general": "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–º—É ${persona.zodiac_sign} (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "love": "–ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –í–µ–Ω–µ—Ä—ã –≤ ${planetaryPositions.venus.split(' ')[2]} (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "career": "–∫–∞—Ä—å–µ—Ä–∞ –∏ –¥–µ–Ω—å–≥–∏ —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)", 
  "health": "–∑–¥–æ—Ä–æ–≤—å–µ —Å —É—á–µ—Ç–æ–º –õ—É–Ω—ã –≤ ${planetaryPositions.moon_position.split(' ')[4]} (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "advice": "–≥–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å–ø–µ–∫—Ç–æ–≤ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "astrological_aspects": {
    "moon_phase": "${planetaryPositions.moon_phase} - –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ ${persona.name}",
    "planetary_positions": "–∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –∫ –Ω–∞—Ç–∞–ª—å–Ω–æ–º—É ${persona.zodiac_sign}",
    "daily_energy": "—ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è –¥–ª—è ${persona.zodiac_sign}",
    "lucky_elements": {
      "colors": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2"],
      "numbers": [—á–∏—Å–ª–æ1, —á–∏—Å–ª–æ2, —á–∏—Å–ª–æ3],
      "direction": "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    }
  }
}`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${vertexApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
          responseMimeType: "application/json"
        }
      }),
    });

    if (!response.ok) {
      console.error('Vertex AI API error:', response.status, await response.text());
      throw new Error(`Vertex AI API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('Vertex AI response:', JSON.stringify(data, null, 2));
    
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      console.error('No generated text from Vertex AI');
      throw new Error('No content generated from AI');
    }
    
    console.log('Generated text:', generatedText);
    
    // Try to parse JSON from the response
    let prediction;
    try {
      // First try to parse directly
      try {
        prediction = JSON.parse(generatedText);
      } catch (directParseError) {
        // Extract JSON from the response (sometimes wrapped in markdown)
        const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          prediction = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('No JSON found in response');
        }
      }
      
      // Ensure we have the calculated planetary positions
      if (!prediction.astrological_chart) {
        prediction.astrological_chart = {
          sun_position: planetaryPositions.sun_position,
          moon_position: planetaryPositions.moon_position,
          mercury: planetaryPositions.mercury,
          venus: planetaryPositions.venus,
          mars: planetaryPositions.mars,
          jupiter: planetaryPositions.jupiter,
          saturn: planetaryPositions.saturn,
          daily_aspect: planetaryPositions.daily_aspect
        };
      }
      
      // Validate prediction structure
      if (!prediction.general || !prediction.love || !prediction.career || !prediction.health || !prediction.advice) {
        throw new Error('Incomplete prediction structure');
      }
      
      console.log('Parsed prediction:', prediction);
      
    } catch (parseError) {
      console.error('JSON parsing error:', parseError);
      console.error('Raw text that failed to parse:', generatedText);
      
      // Fallback prediction with REAL planetary positions
      prediction = {
        astrological_chart: {
          sun_position: planetaryPositions.sun_position,
          moon_position: planetaryPositions.moon_position,
          mercury: planetaryPositions.mercury,
          venus: planetaryPositions.venus,
          mars: planetaryPositions.mars,
          jupiter: planetaryPositions.jupiter,
          saturn: planetaryPositions.saturn,
          daily_aspect: planetaryPositions.daily_aspect
        },
        general: `–°–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. ${planetaryPositions.daily_aspect} —Å–æ–∑–¥–∞–µ—Ç –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É.`,
        love: `–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤–ª–∏—è–Ω–∏–µ ${planetaryPositions.venus} —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—é.`,
        career: `${planetaryPositions.sun_position} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.`,
        health: `${planetaryPositions.moon_position} –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.`,
        advice: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–∏—é ${planetaryPositions.daily_aspect} –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.`,
        astrological_aspects: {
          moon_phase: `${planetaryPositions.moon_phase} - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π`,
          planetary_positions: `${planetaryPositions.daily_aspect} —Å–æ–∑–¥–∞–µ—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É`,
          daily_energy: `–í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è ${planetaryPositions.sun_position}`,
          lucky_elements: { 
            colors: ["–∑–æ–ª–æ—Ç–æ–π", "–∑–µ–ª–µ–Ω—ã–π", "—Å–∏–Ω–∏–π"], 
            numbers: [3, 7, 12], 
            direction: "–≤–æ—Å—Ç–æ–∫" 
          }
        }
      };
    }

    console.log('Generated prediction for:', persona.name);
    
    // Save prediction to database with service role (bypasses RLS)
    const { data: savedPrediction, error: saveError } = await supabase
      .from('predictions')
      .insert([{
        persona_id: persona.id,
        general: prediction.general,
        love: prediction.love,
        career: prediction.career,
        health: prediction.health,
        advice: prediction.advice,
        prediction_date: today.toISOString().split('T')[0]
      }])
      .select()
      .single();

    if (saveError) {
      console.error('Error saving prediction:', saveError);
      // Don't throw error, just log it - we can still return the prediction
    } else {
      console.log('Saved prediction to database:', savedPrediction);
    }
    
    // Return prediction with astrological aspects (which aren't saved to DB)
    const finalPrediction = savedPrediction ? {
      ...savedPrediction,
      astrological_chart: prediction.astrological_chart,
      astrological_aspects: prediction.astrological_aspects
    } : prediction;
    
    return new Response(JSON.stringify({ 
      prediction: finalPrediction
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-prediction:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});